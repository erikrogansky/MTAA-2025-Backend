generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DarkMode {
  y
  n
  s
}


model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String?
  profilePicture String?
  darkMode       DarkMode @default(s) 
  preferences    String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  oauthAccounts OAuthAccount[]
  sessions      Session[]
  devices       Device[]

  recipes Recipe[]
}

model OAuthAccount {
  id         Int    @id @default(autoincrement())
  userId     Int
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   String
  providerId String

  @@unique([provider, providerId])
}

model Session {
  id           String   @id @default(uuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId     String   @unique // âœ… Make this unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
}

model Device {
  id            String   @id @default(uuid())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId      String   @unique
  firebaseToken String?
  createdAt     DateTime @default(now())

  Session Session[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  group     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id          Int      @id @default(autoincrement())
  title       String
  tags        String
  ingredients String
  instructions String
  isPublic    Boolean
  coverPhoto  String?
  description String
  details     String?
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}